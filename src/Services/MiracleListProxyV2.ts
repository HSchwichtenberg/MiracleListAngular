/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.7.2.0 (NJsonSchema v9.6.3.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class MiracleListProxyV2 {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://miraclelistbackend.azurewebsites.net";
    }

    /**
     * Informationen über den Server
     * @return Success
     */
    about(): Observable<string[]> {
        let url_ = this.baseUrl + "/v2/About";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAbout(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAbout(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processAbout(response: Response): Observable<string[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string[]>(<any>null);
    }

    /**
     * Liefert die Version des Servers als Zeichenkette
     * @return Success
     */
    version(): Observable<string> {
        let url_ = this.baseUrl + "/v2/Version";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processVersion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processVersion(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processVersion(response: Response): Observable<string> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * Anmeldung mit einer Client-ID, einem Benutzernamen und einem Kennwort. Diese Operation /Login sendet eine GUID als Sitzungstoken zurück, welches in allen folgenden Operationen mitzugeben ist.
     * @return Success
     */
    login(loginInfo?: LoginInfo | null): Observable<LoginInfo> {
        let url_ = this.baseUrl + "/v2/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginInfo);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogin(response_);
                } catch (e) {
                    return <Observable<LoginInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<LoginInfo>><any>Observable.throw(response_);
        });
    }

    protected processLogin(response: Response): Observable<LoginInfo> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LoginInfo.fromJS(resultData200) : new LoginInfo();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<LoginInfo>(<any>null);
    }

    /**
     * Abmelden des Benutzers
     * @return Success
     */
    logoff(token?: string | null): Observable<boolean> {
        let url_ = this.baseUrl + "/v2/Logoff?";
        if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLogoff(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogoff(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processLogoff(response: Response): Observable<boolean> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * Liste der Kategorien
     * @return Success
     */
    categorySet(mL_AuthToken?: string | null): Observable<Category[]> {
        let url_ = this.baseUrl + "/v2/CategorySet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCategorySet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCategorySet(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processCategorySet(response: Response): Observable<Category[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Category[]>(<any>null);
    }

    /**
     * Liste der Aufgaben in einer Kategorie
     * @return Success
     */
    taskSet(id: number, mL_AuthToken?: string | null): Observable<Task[]> {
        let url_ = this.baseUrl + "/v2/TaskSet/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTaskSet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTaskSet(response_);
                } catch (e) {
                    return <Observable<Task[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task[]>><any>Observable.throw(response_);
        });
    }

    protected processTaskSet(response: Response): Observable<Task[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Task.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Task[]>(<any>null);
    }

    /**
     * Details zu einer Aufgabe mit Teilaufgaben
     * @return Success
     */
    task(id: number, mL_AuthToken?: string | null): Observable<Task> {
        let url_ = this.baseUrl + "/v2/Task/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processTask(response: Response): Observable<Task> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : new Task();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Task>(<any>null);
    }

    /**
     * Volltextsuche in Aufgaben und Teilaufgaben
     * @return Success
     */
    search(text: string, mL_AuthToken?: string | null): Observable<Category[]> {
        let url_ = this.baseUrl + "/v2/Search/{text}";
        if (text === undefined || text === null)
            throw new Error("The parameter 'text' must be defined.");
        url_ = url_.replace("{text}", encodeURIComponent("" + text)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSearch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSearch(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processSearch(response: Response): Observable<Category[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Category[]>(<any>null);
    }

    /**
     * Liste der fälligen Aufgaben
     * @return Success
     */
    dueTaskSet(mL_AuthToken?: string | null): Observable<Category[]> {
        let url_ = this.baseUrl + "/v2/DueTaskSet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDueTaskSet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDueTaskSet(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processDueTaskSet(response: Response): Observable<Category[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Category[]>(<any>null);
    }

    /**
     * Anlegen einer Kategorie
     * @return Success
     */
    createCategory(name: string, mL_AuthToken?: string | null): Observable<Category> {
        let url_ = this.baseUrl + "/v2/CreateCategory/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCategory(response_);
                } catch (e) {
                    return <Observable<Category>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category>><any>Observable.throw(response_);
        });
    }

    protected processCreateCategory(response: Response): Observable<Category> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Category.fromJS(resultData200) : new Category();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Category>(<any>null);
    }

    /**
     * Erstellen einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)
     * @return Success
     */
    createTask(t?: Task | null, mL_AuthToken?: string | null): Observable<Task> {
        let url_ = this.baseUrl + "/v2/CreateTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(t);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processCreateTask(response: Response): Observable<Task> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : new Task();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Task>(<any>null);
    }

    /**
     * Ändern einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)
     * @return Success
     */
    changeTask(t?: Task | null, mL_AuthToken?: string | null): Observable<Task> {
        let url_ = this.baseUrl + "/v2/ChangeTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(t);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processChangeTask(response: Response): Observable<Task> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : new Task();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Task>(<any>null);
    }

    /**
     * Setzt eine Aufgabe auf "erledigt"
     * @return Success
     */
    changeTaskDone(id?: number | null, done?: boolean | null, mL_AuthToken?: string | null): Observable<Task> {
        let url_ = this.baseUrl + "/v2/ChangeTaskDone?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (done !== undefined)
            url_ += "done=" + encodeURIComponent("" + done) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "put",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeTaskDone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeTaskDone(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processChangeTaskDone(response: Response): Observable<Task> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : new Task();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<Task>(<any>null);
    }

    /**
     * Ändern einer Unteraufgabe
     * @return Success
     */
    changeSubTask(st?: SubTask | null, mL_AuthToken?: string | null): Observable<SubTask> {
        let url_ = this.baseUrl + "/v2/ChangeSubTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(st);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeSubTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeSubTask(response_);
                } catch (e) {
                    return <Observable<SubTask>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubTask>><any>Observable.throw(response_);
        });
    }

    protected processChangeSubTask(response: Response): Observable<SubTask> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SubTask.fromJS(resultData200) : new SubTask();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SubTask>(<any>null);
    }

    /**
     * Löschen einer Aufgabe mit allen Teilaufgaben
     * @return Success
     */
    deleteTask(id: number, mL_AuthToken?: string | null): Observable<void> {
        let url_ = this.baseUrl + "/v2/DeleteTask/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTask(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTask(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * Löschen einer Kategorie mit allen Aufgaben und Teilaufgaben
     * @return Success
     */
    deleteCategory(id: number, mL_AuthToken?: string | null): Observable<void> {
        let url_ = this.baseUrl + "/v2/DeleteCategory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "ML-AuthToken": mL_AuthToken, 
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCategory(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

export class LoginInfo implements ILoginInfo {
    clientID?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;
    message?: string | undefined;

    constructor(data?: ILoginInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientID = data["clientID"];
            this.username = data["username"];
            this.password = data["password"];
            this.token = data["token"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): LoginInfo {
        let result = new LoginInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientID"] = this.clientID;
        data["username"] = this.username;
        data["password"] = this.password;
        data["token"] = this.token;
        data["message"] = this.message;
        return data; 
    }
}

export interface ILoginInfo {
    clientID?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;
    message?: string | undefined;
}

export class Category implements ICategory {
    categoryID?: number | undefined;
    name?: string | undefined;
    created?: Date | undefined;
    taskSet?: Task[] | undefined;

    get info() {
        return this.name;
    }

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryID = data["categoryID"];
            this.name = data["name"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            if (data["taskSet"] && data["taskSet"].constructor === Array) {
                this.taskSet = [];
                for (let item of data["taskSet"])
                    this.taskSet.push(Task.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryID"] = this.categoryID;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (this.taskSet && this.taskSet.constructor === Array) {
            data["taskSet"] = [];
            for (let item of this.taskSet)
                data["taskSet"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICategory {
    categoryID?: number | undefined;
    name?: string | undefined;
    created?: Date | undefined;
    taskSet?: Task[] | undefined;
}

export class Task implements ITask {
    taskID?: number | undefined;
    title?: string | undefined;
    created?: Date | undefined;
    due?: Date | undefined;
    importance?: TaskImportance | undefined;
    note?: string | undefined;
    done?: boolean | undefined;
    effort?: number | undefined;
    order?: number | undefined;
    subTaskSet?: SubTask[] | undefined;
    categoryID?: number | undefined;

    get info() {
        return this.title + ": " + this.subTaskSet + " Teilaufgaben";
    }

    constructor(data?: ITask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.taskID = data["taskID"];
            this.title = data["title"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.due = data["due"] ? new Date(data["due"].toString()) : <any>undefined;
            this.importance = data["importance"];
            this.note = data["note"];
            this.done = data["done"];
            this.effort = data["effort"];
            this.order = data["order"];
            if (data["subTaskSet"] && data["subTaskSet"].constructor === Array) {
                this.subTaskSet = [];
                for (let item of data["subTaskSet"])
                    this.subTaskSet.push(SubTask.fromJS(item));
            }
            this.categoryID = data["categoryID"];
        }
    }

    static fromJS(data: any): Task {
        let result = new Task();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskID"] = this.taskID;
        data["title"] = this.title;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["due"] = this.due ? this.due.toISOString() : <any>undefined;
        data["importance"] = this.importance;
        data["note"] = this.note;
        data["done"] = this.done;
        data["effort"] = this.effort;
        data["order"] = this.order;
        if (this.subTaskSet && this.subTaskSet.constructor === Array) {
            data["subTaskSet"] = [];
            for (let item of this.subTaskSet)
                data["subTaskSet"].push(item.toJSON());
        }
        data["categoryID"] = this.categoryID;
        return data; 
    }
}

export interface ITask {
    taskID?: number | undefined;
    title?: string | undefined;
    created?: Date | undefined;
    due?: Date | undefined;
    importance?: TaskImportance | undefined;
    note?: string | undefined;
    done?: boolean | undefined;
    effort?: number | undefined;
    order?: number | undefined;
    subTaskSet?: SubTask[] | undefined;
    categoryID?: number | undefined;
}

export class SubTask implements ISubTask {
    subTaskID?: number | undefined;
    title?: string | undefined;
    done?: boolean | undefined;
    created?: Date | undefined;
    task?: Task | undefined;
    taskID?: number | undefined;

    get info() {
        return this.title;
    }

    constructor(data?: ISubTask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subTaskID = data["subTaskID"];
            this.title = data["title"];
            this.done = data["done"];
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.task = data["task"] ? Task.fromJS(data["task"]) : <any>undefined;
            this.taskID = data["taskID"];
        }
    }

    static fromJS(data: any): SubTask {
        let result = new SubTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subTaskID"] = this.subTaskID;
        data["title"] = this.title;
        data["done"] = this.done;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["task"] = this.task ? this.task.toJSON() : <any>undefined;
        data["taskID"] = this.taskID;
        return data; 
    }
}

export interface ISubTask {
    subTaskID?: number | undefined;
    title?: string | undefined;
    done?: boolean | undefined;
    created?: Date | undefined;
    task?: Task | undefined;
    taskID?: number | undefined;
}

export enum TaskImportance {
    A = <any>"A", 
    B = <any>"B", 
    C = <any>"C", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
	headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
		super();

        this.message = message;
        this.status = status;
        this.response = response;
		this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}